# 🚀 Automatischer Release-Workflow für TI99_Char_Tools
# Dieser Workflow wird bei jedem Push zum Haupt-Branch ausgelöst
# Er baut das Projekt im Release-Modus, liest die Version aus der EXE-Datei
# und veröffentlicht ein GitHub Release mit passendem Tag – völlig automatisch

name: Auto Release – TI99_Char_Tools

on:
  push:
    branches:
      - master  # ⬅️ Nur auslösen, wenn auf den main-Branch gepusht wird

# 🌍 Globale Variablen (Umgebungsvariablen), die wir im gesamten Workflow nutzen können
env:
  PROJECT_NAME: TI99_Char_Tools         # Name des Projektordners UND des .csproj-Files
  EXE_NAME: TI99_Char_Tools.exe         # Name der erzeugten EXE-Datei
  TAG_PREFIX: char                      # Tag-Präfix, z. B. "disk-v1.2.3456.7890"

jobs:
  release:
    name: Build & Release TI99_Char_Tools
    runs-on: windows-latest             # Wir verwenden einen Windows-Runner, damit MSBuild läuft

    steps:
    # 📦 1. Repository auschecken
    - name: Checkout code
      uses: actions/checkout@v3

    # 🔧 2. MSBuild konfigurieren (damit wir Projekte kompilieren können)
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    # 📥 3. NuGet-Abhängigkeiten herunterladen
    - name: Restore NuGet packages
      run: nuget restore TI99_Tools.sln

    # 🛠️ 4. Das Projekt im Release-Modus kompilieren
    - name: Build ${{ env.PROJECT_NAME }}
      run: msbuild ${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj /p:Configuration=Release

    # 🔍 5. Versionsnummer aus der kompilierten EXE extrahieren
    - name: Get version from .exe
      id: get_version
      shell: pwsh
      run: |
        $exePath = "${{ env.PROJECT_NAME }}\bin\Release\${{ env.EXE_NAME }}"
        $version = (Get-Item $exePath).VersionInfo.ProductVersion
        Write-Output "Detected version: $version"
        echo "::set-output name=version::$version"

    # 🧾 6. Release erstellen, falls noch nicht vorhanden
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: ${{ env.PROJECT_NAME }} ${{ steps.get_version.outputs.version }}      # z. B. „TI99_Char_Tools 1.0.9572.42715“
        tag_name: ${{ env.TAG_PREFIX }}-v${{ steps.get_version.outputs.version }}   # z. B. „char-v1.0.9572.42715“
        files: ${{ env.PROJECT_NAME }}/bin/Release/${{ env.EXE_NAME }}              # Die EXE, die hochgeladen wird
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # ⬅️ Zugriffstoken für die API
